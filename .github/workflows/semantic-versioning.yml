name: semantic-versioning
run-name: Automate Versioning based on commits

on:
  push:
    branches-ignore: [master, main]
jobs: # list of things to do
  version-increment:
    name: semanticversioning # job name (unique id)
    runs-on: ubuntu-latest # on which machine to run
    steps: # list of steps
      - uses: paulhatch/semantic-version@v5.0.2
        with:
          # The prefix to use to identify tags
          tag_prefix: 'v'
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: 'MAJOR'
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ''
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: 'MINOR'
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ''
          # A string to determine the format of the version output
          version_format: '${major}.${minor}.${patch}-prerelease${increment}'
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          # change_path: 'src/my-service'

          # Named version, will be used as suffix for name version tag
          # namespace: my-service

          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true

          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: true

          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: 'json'
